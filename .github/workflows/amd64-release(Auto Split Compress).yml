name: x86-64 Pull, Save, Compress, and Release Docker Images ( Auto Split Compression)


on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写 Docker 镜像名称，多个用英文逗号分隔 (例如: alpine:latest,nginx:stable)'
        required: true
        default: 'alpine:latest' # 设置默认的 Docker 镜像列表

env:
  # GitHub Actions 会自动提供此 Token，gh CLI 需要它来与仓库交互
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # 设置分卷大小（略小于 2GiB 以保证安全）
  SPLIT_SIZE: 1990m

jobs:
  pull_package_release_sequentially:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要写入权限来创建 Release 和上传资源

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Show Initial Disk Space
      run: |
        echo "Initial disk space:"
        df -h / || true
        df -h . || true

    - name: Install 7-Zip
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full
        echo "7-Zip installed."

    - name: Set up Docker Buildx (optional but good practice)
      uses: docker/setup-buildx-action@v3

    - name: Clean up Docker to free space
      run: |
        echo "Starting Docker cleanup..."
        docker system prune -a -f || true # Allow failure if nothing to prune
        docker volume prune -f || true
        echo "Docker cleanup finished."
        echo "Disk space after Docker cleanup:"
        df -h / || true
        df -h . || true

    - name: Process Docker Images Sequentially
      id: process_images
      shell: bash
      run: |
        # Do not exit immediately on error, handle errors manually in the loop
        # set -e

        images_input="${{ github.event.inputs.docker_images }}"
        images_input_cleaned=$(echo "$images_input" | sed 's/ *, */,/g')
        IFS=',' read -r -a image_array <<< "$images_input_cleaned"

        # --- Release Variables ---
        RELEASE_TAG="docker-images-$(date +'%Y%m%d')-${{ github.run_id }}"
        RELEASE_TITLE="Docker Images Build - $(date +'%Y-%m-%d %H:%M:%S')"
        RELEASE_BODY_HEADER="Automated release containing Docker images (processed sequentially):\n"
        declare -a processed_info=() # Stores status for final release notes

        # 将分卷大小转换为字节
        size_limit_bytes=$(($(echo "$SPLIT_SIZE" | sed 's/[mM]//i') * 1024 * 1024))
        echo "Using split volume size: $SPLIT_SIZE (approx $size_limit_bytes bytes)"

        echo "Target images: ${image_array[@]}"
        echo "Target Release Tag: $RELEASE_TAG"

        # --- Create Release (only once) ---
        echo "Creating GitHub Release..."
        if ! gh release create "$RELEASE_TAG" --title "$RELEASE_TITLE" --notes "Processing images..." --draft=false --prerelease=false; then
          echo "::error::Failed to create GitHub Release. Aborting."
          exit 1
        fi
        echo "Release $RELEASE_TAG created successfully."

        # --- Process Each Image Sequentially ---
        total_images=${#image_array[@]}
        processed_count=0

        for i in "${!image_array[@]}"; do
          image="${image_array[$i]}"
          image_index=$((i + 1))
          # 去除前后空格
          image=$(echo "$image" | xargs)
          if [[ -z "$image" ]]; then
            echo "Skipping empty image entry (#$image_index)."
            processed_info+=("*   Image #$image_index: Skipped (empty input)")
            continue
          fi

          echo ""
          echo "-----------------------------------------------------"
          echo "Processing image $image_index of $total_images: $image"
          echo "-----------------------------------------------------"
          echo "Disk space before processing '$image':"
          df -h . || true

          image_file_base="${image//\//_}" # Replace slashes
          image_file_base="${image_file_base//:/_}" # Replace colons
          image_file_tar="${image_file_base}-amd64.tar"
          image_file_gz="${image_file_tar}.gz"
          image_7z_base="${image_file_base}-amd64.tar.gz" # Base name for 7z parts

          # Clean up potential leftovers from previous failed runs for this image
          rm -f "${image_file_tar}" "${image_file_gz}" "${image_7z_base}.7z."*

          local_files_to_upload=() # Files to upload for *this* image
          status_message=""
          success=true

          # 1. Pull Image
          echo "[1/6] Pulling $image (platform linux/amd64)..."
          if ! docker pull "${image}" --platform "linux/amd64"; then
             echo "::error::Failed to pull image '$image'. Skipping this image."
             status_message="*   \`$image\` (#$image_index): **Failed to pull**"
             success=false
          fi

          # 2. Save Image
          if $success; then
            echo "[2/6] Saving $image to $image_file_tar..."
            if ! docker save "${image}" -o "$image_file_tar"; then
               echo "::error::Failed to save image '$image' to TAR. Skipping subsequent steps for this image."
               status_message="*   \`$image\` (#$image_index): **Failed to save**"
               rm -f "${image_file_tar}" # Clean up potentially incomplete tar
               success=false
            fi
          fi

          # 3. Remove Docker Image (immediately after saving)
          if $success; then
            echo "[3/6] Removing Docker image '$image' from local storage..."
            if ! docker image rm -f "${image}"; then
               echo "::warning::Failed to remove docker image '$image' locally. Continuing process."
               # Don't mark as failed, just warn
            else
               echo "Docker image '$image' removed."
               echo "Disk space after removing image:"
               df -h . || true
            fi
          fi

          # 4. Compress TAR to TAR.GZ
          if $success; then
            echo "[4/6] Compressing $image_file_tar to $image_file_gz..."
            if ! gzip "$image_file_tar"; then # gzip removes source .tar on success
              echo "::error::Failed to gzip '$image_file_tar'. Skipping subsequent steps for this image."
              status_message="*   \`$image\` (#$image_index): **Failed to compress (gzip)**"
              rm -f "$image_file_tar" # Ensure original tar is removed if gzip failed midway
              success=false
            else
              # Gzip succeeded, original .tar is gone.
              echo "Compression to $image_file_gz successful."
            fi
          fi

          # 5. Check Size and Optionally Split with 7z
          if $success; then
            echo "[5/6] Checking size and preparing for upload..."
            if [[ ! -f "$image_file_gz" ]]; then
               echo "::error::Compressed file '$image_file_gz' not found. Skipping upload for this image."
               status_message="*   \`$image\` (#$image_index): **Compressed file missing**"
               success=false
            else
              gz_size=$(stat -c%s "$image_file_gz")
              echo "Size of $image_file_gz is $gz_size bytes."

              if [[ "$gz_size" -gt "$size_limit_bytes" ]]; then
                echo "$image_file_gz is larger than $SPLIT_SIZE. Creating split 7z archive..."
                # Create 7z split archive: imagename.tar.gz.7z.001, ...
                if 7z a "${image_7z_base}.7z" -v"$SPLIT_SIZE" "$image_file_gz"; then
                  echo "Split 7z archive created successfully."
                  # Find the created parts
                  while IFS= read -r -d $'\0' file; do
                    local_files_to_upload+=("$file")
                  done < <(find . -maxdepth 1 -name "${image_7z_base}.7z.*" -print0)
                  # Remove the original large .gz file
                  rm "$image_file_gz"
                  size_gb=$(printf "%.2f GiB" $(bc <<< "scale=2; $gz_size/1024/1024/1024"))
                  status_message="*   \`$image\` (#$image_index): Size $size_gb (split into ${#local_files_to_upload[@]} .7z volumes)"
                else
                  echo "::error::Failed to create split 7z archive for '$image_file_gz'. Upload step will be skipped."
                  status_message="*   \`$image\` (#$image_index): Size $(printf "%.2f GiB" $(bc <<< "scale=2; $gz_size/1024/1024/1024")) (**7z splitting failed**)"
                  # Keep the original .gz for potential manual cleanup? Or delete it? Let's delete it to be consistent with failure.
                  rm -f "$image_file_gz" # Clean up
                  success=false # Mark as failed for upload/cleanup logic
                fi
              else
                echo "$image_file_gz is within the size limit."
                local_files_to_upload+=("$image_file_gz")
                size_mb=$(printf "%.2f MiB" $(bc <<< "scale=2; $gz_size/1024/1024"))
                status_message="*   \`$image\` (#$image_index): Size $size_mb (.tar.gz)"
              fi
            fi
          fi

          # 6. Upload to Release and Clean Up Local Files
          if $success && [[ ${#local_files_to_upload[@]} -gt 0 ]]; then
            echo "[6/6] Uploading generated file(s) to Release $RELEASE_TAG:"
            printf '  %s\n' "${local_files_to_upload[@]}"
            if gh release upload "$RELEASE_TAG" "${local_files_to_upload[@]}" --clobber; then
              echo "Upload successful."
              echo "Cleaning up local file(s): ${local_files_to_upload[*]}"
              rm -f "${local_files_to_upload[@]}"
              status_message+=", Uploaded" # Append to existing status
            else
              echo "::error::Failed to upload asset(s) for '$image' to release $RELEASE_TAG."
              status_message+=", **Upload Failed**"
              # Keep local files for debugging if upload fails
            fi
          elif $success && [[ ${#local_files_to_upload[@]} -eq 0 ]]; then
             # This case shouldn't happen if success is true, but good to check
             echo "::warning::Marked as success but no files generated for upload for image '$image'."
             status_message+=" - No files to upload"
          fi

          # Record the final status for this image
          processed_info+=("$status_message")

          echo "Disk space after processing '$image':"
          df -h . || true
          echo "--- Finished processing '$image' ---"
          processed_count=$((processed_count + 1))
        done

        # --- Final Release Notes Update ---
        echo ""
        echo "-----------------------------------------------------"
        echo "All images processed. Updating final release notes."
        FINAL_RELEASE_BODY="${RELEASE_BODY_HEADER}\nProcessed $processed_count out of $total_images images:\n"
        for info in "${processed_info[@]}"; do
          FINAL_RELEASE_BODY+="$info\n"
        done
        FINAL_RELEASE_BODY+="\n\n**Notes:**\n*   Images resulting in archives larger than ${SPLIT_SIZE} have been split into multiple '.7z.XXX' volumes using 7-Zip.\n*   Use 7-Zip or a compatible tool to extract the first volume (e.g., '.7z.001') to reconstruct the original '.tar.gz' file."

        # Use process substitution for multi-line notes
        if ! gh release edit "$RELEASE_TAG" --notes-file <(echo -e "$FINAL_RELEASE_BODY"); then
           echo "::warning::Failed to update final release notes."
        fi
        echo "Release notes updated."

        # Check if any images were successfully processed and uploaded at least partially
        successful_uploads=$(echo -e "$FINAL_RELEASE_BODY" | grep -c -i "Uploaded")
        if [[ $processed_count -gt 0 && $successful_uploads -eq 0 && ${#processed_info[@]} -gt 0 ]]; then
           echo "::warning::No files were successfully uploaded for any image."
           # Decide if you want to delete the release in this case
           # echo "Deleting release $RELEASE_TAG as no files were successfully uploaded."
           # gh release delete "$RELEASE_TAG" --yes || echo "Failed to delete release."
        elif [[ $processed_count -eq 0 && ${#image_array[@]} -gt 0 ]]; then
           echo "::error::No images were processed (all failed or skipped)."
           echo "Deleting empty release $RELEASE_TAG"
           gh release delete "$RELEASE_TAG" --yes || echo "::warning::Failed to delete empty release."
        elif [[ ${#image_array[@]} -eq 0 ]]; then
           echo "No images provided in input."
           echo "Deleting empty release $RELEASE_TAG"
           gh release delete "$RELEASE_TAG" --yes || echo "::warning::Failed to delete empty release."
        fi

        echo "Workflow finished."


    - name: Final Disk Space Check
      if: always()
      run: |
        echo "Final disk space:"
        df -h / || true
        df -h . || true

    - name: Final Docker Cleanup (optional)
      if: always() # Run even if previous steps fail
      run: |
        echo "Starting final Docker cleanup..."
        docker system prune -a -f || true
        docker volume prune -f || true
        echo "Final Docker cleanup finished."
